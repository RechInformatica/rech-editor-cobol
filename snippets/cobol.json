{
	"conditions": {
		"sourceFileNameRegex": ".*"
	},
	"snippets": [
		{
			"prefix": "ml",
			"body": "move low-values to ${0:<var1>},"
		},
		{
			"prefix": "mh",
			"body": "move high-values to ${0:<var1>},"
		},
		{
			"prefix": "ms",
			"body": "move spaces to ${0:<var1>},"
		},
		{
			"prefix": "mz",
			"body": "move zeros to ${0:<var1>},"
		},
		{
			"prefix": "ad1",
			"body": "add 1 to ${0:<var>},"
		},
		{
			"prefix": "su1",
			"body": "subtract 1 from ${0:<var>},"
		},
		{
			"prefix": "cp",
			"body": "compute ${1:<var>} = ${0:<formula>},"
		},
		{
			"prefix": "cr",
			"body": "compute ${1:<var>} rounded = ${0:<formula>},"
		},
		{
			"prefix": "vl",
			"body": "value ${0:<value>}."
		},
		{
			"prefix": "in",
			"body": "initialize ${0:<var>},"
		},
		{
			"prefix": "filler",
			"body": "filler"
		},
		{
			"prefix": "true",
			"body": "true"
		},
		{
			"prefix": "ze",
			"body": "zeros"
		},
		{
			"prefix": "zr",
			"body": "zeros"
		},
		{
			"prefix": "sp",
			"body": "spaces"
		},
		{
			"prefix": "lv",
			"body": "low-values"
		},
		{
			"prefix": "low-values",
			"body": "low-values"
		},
		{
			"prefix": "hv",
			"body": "high-values"
		},
		{
			"prefix": "high-values",
			"body": "high-values"
		},
		{
			"prefix": "bwz",
			"body": "blank when zeros"
		},
		{
			"prefix": "RechDoc",
			"body": [
				"      *>/**",
				"      *> ${0:Paragraph documentation}",
				"      *>",
				"      *> @param XXXXXX-XXX parameter description",
				"      *> @return XXXXXX-XXX result description",
				"      *> @throws XXXXXX-XXX error description",
				"      *>*/"
			],
			"description": "RechDoc documentation"
		},
		{
			"prefix": "RechDoc @param",
			"body": "@param ${1:XXXXXX-XXX} ${0:parameter description}",
			"description": "RechDoc parameter"
		},
		{
			"prefix": "RechDoc @return",
			"body": "@return ${1:XXXXXX-XXX} ${0:result description}",
			"description": "RechDoc result"
		},
		{
			"prefix": "RechDoc @throws",
			"body": "@throws ${1:XXXXXX-XXX} ${0:error description}",
			"description": "RechDoc error"
		},
		{
			"prefix": "RechDoc @enum",
			"body": "   @enum ${1:XXXXXX-XXX} ${0:enum description}",
			"description": "RechDoc enum"
		},
		{
			"prefix": "RechDoc @optional",
			"body": "   @optional",
			"description": "RechDoc optional parameter"
		},
		{
			"prefix": "RechDoc @default",
			"body": "   @default",
			"description": "RechDoc default value"
		},
		{
			"prefix": "search",
			"body": [
				"           search all             <Table_name>",
				"              at end",
				"                 ...",
				"              when <condition>",
				"                 next             sentence,",
				"           end-search."
			],
			"description": "Search table"
		},
		{
			"prefix": "string",
			"body": [
				"string                 ${1:<var1>}, ${2:<var2>},",
				"   delimited by size into ${0:<var>}."
			],
			"description": "string delimited by size"
		},
		{
			"prefix": "string",
			"body": [
				"string                 ${1:<var1>}, ${2:<var2>},",
				"   delimited by size into ${2:<var>}",
				"      with pointer     ${0:<ponteiro>.}"
			],
			"description": "string delimited/with pointer"
		},
		{
			"prefix": "initialize",
			"body": [
				"initialize             ${1:<var>}",
				"   replacing           alphanumeric data by spaces."
			],
			"description": "initialize ... replacing alphanumeric"
		},
		{
			"prefix": "$length",
			"body": "$length(${0:<var>})",
			"description": "Returns an integer equal to the length of the variable specified in argument-1"
		},
		{
			"prefix": "$date",
			"body": "$current-date",
			"description": "Returns in an integer 9(12) of the current date. Format AAAAMMDDHHMM"
		},
		{
			"prefix": "$upper",
			"body": "$upper-case(${0:<var>})",
			"description": "Returns the value of argument-1 in uppercase"
		},
		{
			"prefix": "$lower",
			"body": "$lower-case(${0:<var>})",
			"description": "Returns the value of argument-1 in lowercase"
		},
		{
			"prefix": "$mod",
			"body": "$mod(${0:<var>})",
			"description": "Returns the rest of the division between argument-1 and argument-2"
		},
		{
			"prefix": "$integer",
			"body": "$integer(${0:<var>})",
			"description": "Returns the largest integer value before argument-1"
		},
		{
			"prefix": "$comp",
			"body": "$when-compiled",
			"description": "Returns date and time that the program was compiled. Format YYYYMMDDHHMMSSCC-TIMEZONE"
		},
		{
			"prefix": "$numval",
			"body": "$numval(${0:<var>})",
			"description": "Returns a numeric value for the alphanumeric value of argument-1"
		},
		{
			"prefix": "$log10",
			"body": "$log10(${0:<var>})",
			"description": "Returns an approximate numeric value for the base-10 logarithm of argument-1"
		},
		{
			"prefix": "$rem",
			"body": "$rem(${0:<var>})",
			"description": "returns a numeric value that is the remainder of argument-1 divided by argument-2"
		},
		{
			"prefix": "$abs",
			"body": "$abs(${0:<var>})",
			"description": "Returns the absolute (integer) value of argument-1"
		},
		{
			"prefix": "$sqrt",
			"body": "$sqrt(${0:<var>})",
			"description": "Returns the square root of argument-1"
		}
	]
}
